/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgGUI;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import pkgGrafico.MostraGrafico;
import pkgPoliticas.Escalonamentos;
import pkgProcesso.Processo;
import pkgRandomico.Randomico;

/**
 *
 * @author Leonardo Neves
 * @author Matheus Coelho
 * @author Rômulo Lima
 */
public class FramePrincipal extends javax.swing.JFrame {

    private int np = 0;
    private Randomico numero = new Randomico();
    private LinkedList<String> textos = new LinkedList<String>();

    /**
     * Creates new form FramePrincipal
     */
    public FramePrincipal() {
        initComponents();
        setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupPoliticas = new javax.swing.ButtonGroup();
        scrollPaneLista = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        panelProcesso = new javax.swing.JPanel();
        labelTempoChegada = new javax.swing.JLabel();
        tempoChegada = new javax.swing.JTextField();
        labelTempoSurto = new javax.swing.JLabel();
        tempoExec = new javax.swing.JTextField();
        adicionar = new javax.swing.JButton();
        processosRandomicos = new javax.swing.JButton();
        ioCheckBox = new javax.swing.JCheckBox();
        panelBotoesRemocao = new javax.swing.JPanel();
        eraseTable = new javax.swing.JButton();
        removerProcesso = new javax.swing.JButton();
        exFIFO = new javax.swing.JRadioButton();
        exRR = new javax.swing.JRadioButton();
        exSJF = new javax.swing.JRadioButton();
        exSRTF = new javax.swing.JRadioButton();
        tabbedPaneResultados = new javax.swing.JTabbedPane();
        scrollPaneResultado = new javax.swing.JScrollPane();
        resultado = new javax.swing.JTextPane();
        scrollPaneTempos = new javax.swing.JScrollPane();
        temposProcessosT = new javax.swing.JTextPane();
        labelQuantum = new javax.swing.JLabel();
        quantumT = new javax.swing.JTextField();
        executar = new javax.swing.JButton();
        panelDetalhesIO = new javax.swing.JPanel();
        labelDuracaoIO = new javax.swing.JLabel();
        labelTempoInicioIO = new javax.swing.JLabel();
        iIO = new javax.swing.JTextField();
        dIO = new javax.swing.JTextField();
        labelDetalhesProcessoIO = new javax.swing.JLabel();
        labelNomesPoliticas = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        menuArquivo = new javax.swing.JMenu();
        menuImportar = new javax.swing.JMenuItem();
        menuExportar = new javax.swing.JMenuItem();
        menuSobre = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Escalonador  de Processos - Simulador");
        setName("FramePrincipal"); // NOI18N
        setResizable(false);

        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Processo", "Tempo de Chegada", "Tempo de Surto", "I/O", "Tempo de Inicio I/O", "Duração I/O"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.setToolTipText("Lista de processos");
        tabela.setAutoscrolls(false);
        tabela.setGridColor(new java.awt.Color(204, 204, 204));
        tabela.setName("tabela"); // NOI18N
        tabela.setRequestFocusEnabled(false);
        tabela.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabela.getTableHeader().setResizingAllowed(false);
        tabela.getTableHeader().setReorderingAllowed(false);
        scrollPaneLista.setViewportView(tabela);
        if (tabela.getColumnModel().getColumnCount() > 0) {
            tabela.getColumnModel().getColumn(0).setResizable(false);
            tabela.getColumnModel().getColumn(1).setResizable(false);
            tabela.getColumnModel().getColumn(2).setResizable(false);
            tabela.getColumnModel().getColumn(3).setResizable(false);
            tabela.getColumnModel().getColumn(4).setResizable(false);
            tabela.getColumnModel().getColumn(5).setResizable(false);
        }

        panelProcesso.setBackground(new java.awt.Color(153, 153, 153));

        labelTempoChegada.setText("Tempo de chegada");

        tempoChegada.setText("0");

        labelTempoSurto.setText("Tempo de Surto");

        tempoExec.setText("25");

        adicionar.setBackground(new java.awt.Color(153, 153, 153));
        adicionar.setText("Adicionar este Processo");
        adicionar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                adicionarMousePressed(evt);
            }
        });

        processosRandomicos.setBackground(new java.awt.Color(153, 153, 153));
        processosRandomicos.setText("Processos randômicos");
        processosRandomicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                processosRandomicosMousePressed(evt);
            }
        });

        ioCheckBox.setBackground(new java.awt.Color(153, 153, 153));
        ioCheckBox.setText("I/O");
        ioCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ioCheckBoxMousePressed(evt);
            }
        });

        javax.swing.GroupLayout panelProcessoLayout = new javax.swing.GroupLayout(panelProcesso);
        panelProcesso.setLayout(panelProcessoLayout);
        panelProcessoLayout.setHorizontalGroup(
            panelProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProcessoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelProcessoLayout.createSequentialGroup()
                        .addComponent(adicionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(processosRandomicos))
                    .addGroup(panelProcessoLayout.createSequentialGroup()
                        .addGroup(panelProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tempoChegada, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelTempoChegada))
                        .addGap(67, 67, 67)
                        .addGroup(panelProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelProcessoLayout.createSequentialGroup()
                                .addComponent(tempoExec, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(ioCheckBox))
                            .addComponent(labelTempoSurto))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelProcessoLayout.setVerticalGroup(
            panelProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProcessoLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(panelProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTempoChegada)
                    .addComponent(labelTempoSurto))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempoChegada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tempoExec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ioCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProcessoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adicionar)
                    .addComponent(processosRandomicos))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        panelBotoesRemocao.setBackground(new java.awt.Color(153, 153, 153));

        eraseTable.setBackground(new java.awt.Color(153, 153, 153));
        eraseTable.setText("Apagar tudo");
        eraseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                eraseTableMousePressed(evt);
            }
        });

        removerProcesso.setBackground(new java.awt.Color(153, 153, 153));
        removerProcesso.setText("Remover Linha Selecionada");
        removerProcesso.setName("remover"); // NOI18N
        removerProcesso.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                removerProcessoMousePressed(evt);
            }
        });

        javax.swing.GroupLayout panelBotoesRemocaoLayout = new javax.swing.GroupLayout(panelBotoesRemocao);
        panelBotoesRemocao.setLayout(panelBotoesRemocaoLayout);
        panelBotoesRemocaoLayout.setHorizontalGroup(
            panelBotoesRemocaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotoesRemocaoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelBotoesRemocaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removerProcesso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(eraseTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelBotoesRemocaoLayout.setVerticalGroup(
            panelBotoesRemocaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBotoesRemocaoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(removerProcesso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(eraseTable)
                .addContainerGap())
        );

        groupPoliticas.add(exFIFO);
        exFIFO.setSelected(true);
        exFIFO.setText("FIFO");
        exFIFO.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        exFIFO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exFIFOMousePressed(evt);
            }
        });

        groupPoliticas.add(exRR);
        exRR.setText("RR");
        exRR.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        exRR.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exRRMousePressed(evt);
            }
        });

        groupPoliticas.add(exSJF);
        exSJF.setText("SJF");
        exSJF.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        exSJF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exSJFMousePressed(evt);
            }
        });

        groupPoliticas.add(exSRTF);
        exSRTF.setText("SRTF");
        exSRTF.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        exSRTF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exSRTFMousePressed(evt);
            }
        });

        resultado.setEditable(false);
        resultado.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        resultado.setFocusCycleRoot(false);
        resultado.setFocusable(false);
        resultado.setRequestFocusEnabled(false);
        scrollPaneResultado.setViewportView(resultado);

        tabbedPaneResultados.addTab("Resultado", scrollPaneResultado);

        temposProcessosT.setEditable(false);
        temposProcessosT.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        temposProcessosT.setFocusCycleRoot(false);
        temposProcessosT.setFocusable(false);
        temposProcessosT.setRequestFocusEnabled(false);
        scrollPaneTempos.setViewportView(temposProcessosT);

        tabbedPaneResultados.addTab("Tempos de Processos", scrollPaneTempos);

        labelQuantum.setText("Quantum");

        quantumT.setText("30");
        quantumT.setEnabled(false);
        quantumT.setName("quantumT"); // NOI18N

        executar.setLabel("Executar");
        executar.setName("run"); // NOI18N
        executar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                executarMousePressed(evt);
            }
        });

        panelDetalhesIO.setBackground(new java.awt.Color(153, 153, 153));

        labelDuracaoIO.setText("Duração de I/O");

        labelTempoInicioIO.setText("Tempo de início");

        iIO.setEnabled(false);

        dIO.setEnabled(false);

        labelDetalhesProcessoIO.setText("Detalhes Processo com I/O");

        javax.swing.GroupLayout panelDetalhesIOLayout = new javax.swing.GroupLayout(panelDetalhesIO);
        panelDetalhesIO.setLayout(panelDetalhesIOLayout);
        panelDetalhesIOLayout.setHorizontalGroup(
            panelDetalhesIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelDetalhesIOLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDetalhesIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(iIO, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTempoInicioIO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelDetalhesIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dIO, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDuracaoIO))
                .addContainerGap())
            .addGroup(panelDetalhesIOLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(labelDetalhesProcessoIO)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        panelDetalhesIOLayout.setVerticalGroup(
            panelDetalhesIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDetalhesIOLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelDetalhesProcessoIO)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelDetalhesIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDuracaoIO)
                    .addComponent(labelTempoInicioIO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDetalhesIOLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iIO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        labelNomesPoliticas.setText("Política de escalonamento:");

        menuArquivo.setText("Arquivo");
        menuArquivo.setDelay(100);

        menuImportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/import16x16.png"))); // NOI18N
        menuImportar.setText("Importar");
        menuImportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuImportarMousePressed(evt);
            }
        });
        menuArquivo.add(menuImportar);

        menuExportar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/export16x16.png"))); // NOI18N
        menuExportar.setText("Exportar");
        menuExportar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuExportarMousePressed(evt);
            }
        });
        menuArquivo.add(menuExportar);

        menuBar.add(menuArquivo);

        menuSobre.setText("Sobre");
        menuSobre.setAutoscrolls(true);
        menuSobre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                menuSobreMousePressed(evt);
            }
        });
        menuBar.add(menuSobre);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPaneResultados)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelProcesso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelDetalhesIO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelBotoesRemocao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPaneLista)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelNomesPoliticas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exFIFO)
                        .addGap(18, 18, 18)
                        .addComponent(exRR)
                        .addGap(18, 18, 18)
                        .addComponent(exSJF)
                        .addGap(18, 18, 18)
                        .addComponent(exSRTF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelQuantum)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(quantumT, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(executar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPaneLista, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exFIFO)
                    .addComponent(exRR)
                    .addComponent(exSJF)
                    .addComponent(exSRTF)
                    .addComponent(labelQuantum)
                    .addComponent(quantumT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(executar)
                    .addComponent(labelNomesPoliticas))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelProcesso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBotoesRemocao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDetalhesIO, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPaneResultados, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ioCheckBoxMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ioCheckBoxMousePressed
        if (ioCheckBox.isSelected() == true) {
            iIO.setEnabled(false);
            dIO.setEnabled(false);
        }
        if (ioCheckBox.isSelected() == false) {
            iIO.setEnabled(true);
            dIO.setEnabled(true);
        }
    }//GEN-LAST:event_ioCheckBoxMousePressed

    private void adicionarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_adicionarMousePressed
        
        np = tabela.getRowCount(); //conta o numero de linhas da tabela
        String tempChegada = tempoChegada.getText().trim(); //recebe o valor do campo tempo de chegada
        String tempSurto = tempoExec.getText().trim(); //recebe o valor do tempo de surto (execucao)
        Boolean ioOp = ioCheckBox.isSelected(); //recebe dado sobre io do processo
        
        if (ioOp == true) {
            String tini = iIO.getText().trim(); //recebe o momento de inicio do io
            String dio = dIO.getText().trim(); //recebe o tempo de duracao do io
            if (Integer.parseInt(tini) < 0 || Integer.parseInt(dio) <= 0) {
                JOptionPane.showMessageDialog(rootPane, "Valor inválido para duração de I/O ou momento de inicio do I/O!\n" + "\nInsira um valor de inicio menor ou igual ao de surto e uma valor de ducação superior a zero,\n ambos os valores devem ser positivos.", "Valor inválido encontrado!", JOptionPane.WARNING_MESSAGE);
            } else {
                DefaultTableModel val = (DefaultTableModel) tabela.getModel();
                String p = "P" + np;
                val.addRow(new Object[]{p, tempChegada, tempSurto, ioOp, tini, dio});
            }
        } else {
            DefaultTableModel val = (DefaultTableModel) tabela.getModel();
            String p = "P" + np;
            val.addRow(new Object[]{p, tempChegada, tempSurto, ioOp, " - ", " - "});
        }
        //
        tempoChegada.setText(""); //limpa o campo tempo de chegada no formulario
        tempoExec.setText(""); //limpa o campo tempo de surto (execucao) no formulario
        iIO.setText(""); //limpa o campo tempo de inicio IO
        dIO.setText(""); //limpa o campo duracao de IO
        //
        ioCheckBox.setSelected(false);
        iIO.setEnabled(false);
        dIO.setEnabled(false);
        tempoChegada.requestFocus();
    }//GEN-LAST:event_adicionarMousePressed

    private void processosRandomicosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_processosRandomicosMousePressed
        int numeroDeLinhasAntes = tabela.getRowCount(); //conta o numero de linhas da tabela
        int limite;
        //
        try {
            String ob = JOptionPane.showInputDialog(null, "Digite o número de processos que deseja adicionar", "Processos Randômicos", JOptionPane.QUESTION_MESSAGE);
            if (ob == null || ob.equals("")) {
                return;
            }else{
                limite = Integer.parseInt(ob);
                
                    do {
                    np = tabela.getRowCount(); //conta o numero de linhas da tabela
                    int tC = numero.r(); //recebe um valor aleatorio para tempo de chegada
                    int tS = numero.r(); //recebe um valor aleatorio para tempo de surto
                    //
                    if (tS == 0) { // se o surto for igual a zero
                        do {
                            tS = numero.r();
                        } while (tS < 30);
                    }
                    //        
                    if (tabela.getRowCount() + 1 == (limite + numeroDeLinhasAntes) && tC != 0) { //condicao ocorre para garantir que ao menos um processo chegará no tempo zero
                        tC = 0;
                        while (tS < 30) {// como ao menos um processo tem que chegar no tempo zero, que este tambem tenha um surto moderado
                            tS = numero.r(); // pseudo aleatoriamente selecionar outro valor para tS
                        }
                    }
                    //
                    boolean io = numero.rIOOp();
                    if (io == true) {
                        DefaultTableModel val = (DefaultTableModel) tabela.getModel();
                        String p = "P" + np;
                        int iniIO = numero.nIn(tS); //inicio do IO sempre ocorre em um tepo dentro do tempo de surto do processo
                        int duracaoIO = numero.r();
                        if (duracaoIO == 0) {// caso o tempo de IO seja zero
                            do {
                                duracaoIO = numero.r();
                            } while (duracaoIO == 0);
                        }
                        val.addRow(new Object[]{p, tC + "", tS + "", io, iniIO, duracaoIO}); //adiciona os valores as respectivas areas da tabela
                    } else {
                        DefaultTableModel val = (DefaultTableModel) tabela.getModel();
                        String p = "P" + np;
                        val.addRow(new Object[]{p, tC + "", tS + "", io, " - ", " - "}); //adiciona os valores as respectivas areas da tabela
                    }
                    //
                } while (tabela.getRowCount() < (limite + numeroDeLinhasAntes));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "O valor digitado é inválido.\nDigite um número inteiro!", "Valor inválido!", JOptionPane.WARNING_MESSAGE);
        }
        tempoChegada.requestFocus();
    }//GEN-LAST:event_processosRandomicosMousePressed

    private void executarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_executarMousePressed
        //
        if (tabela.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(rootPane, "Lista de processos está vazia!\nAdicione processos para executar.", "Lista Vazia!", JOptionPane.WARNING_MESSAGE);
        } else {
            resultado.setText("");
            temposProcessosT.setText("");
            //
            int tS, tCheg, tiIO, tdIO, surtoTotal = 0; //tempos de surto e de chegada
            String nome;
            int tamanhoTabela = tabela.getRowCount(); //numero de linhas da tabela
            //
            int quantum = Integer.parseInt(quantumT.getText().trim()); //quantum digitado
            //
            if (quantum < 0) {
                quantum *= -1; //garante que o quantum sera sempre positivo
                quantumT.setText(quantum + "");
            }
            if (quantum == 0) {
                while (quantum <= 1) {
                    quantum = numero.rquantum();  //busca outro valor para quantum
                }
                quantumT.setText(quantum + ""); //garante que o quantum nao seja zero e coloca este valor no campo quantum
            }
            //
            Escalonamentos escalonar = new Escalonamentos();
            //
            Processo todosProcessos[] = new Processo[tamanhoTabela]; //array com numero de linhas da tabela, numero de processos
            //
            for (int x = 0; x < tamanhoTabela; x++) { //coloca os dados da tabela no vetor de processos
                try {
                    nome = tabela.getValueAt(x, 0).toString(); //nome do processo
                    tCheg = Integer.parseInt(tabela.getValueAt(x, 1).toString().trim());  //tempo de chegada
                    tS = Integer.parseInt(tabela.getValueAt(x, 2).toString().trim()); //tempo de surto
                    Boolean ioStatus = (Boolean) tabela.getValueAt(x, 3);
                    if (ioStatus == true) { // recebe os valores de ducarao e inicio de io
                        tiIO = Integer.parseInt(tabela.getValueAt(x, 4).toString().trim());
                        tdIO = Integer.parseInt(tabela.getValueAt(x, 5).toString().trim());
                        //surtoTotal += tdIO; //soma no tempo de surto o tempo de duracao do IO
                    } else {
                        tiIO = -1;
                        tdIO = -1;
                    }
                    //
                    if (tCheg < 0) {
                        tCheg *= -1; //garante que o valor recebido seja sempre positivo para tempo de chegada
                        ((DefaultTableModel) tabela.getModel()).setValueAt(tCheg, x, 1); //atualiza na tabela o tempo de chegada do processo para positivo
                    }
                    //
                    if (tS < 0) {
                        tS *= -1;  //garante que o valor recebido seja sempre positivo para tempo de surto
                        ((DefaultTableModel) tabela.getModel()).setValueAt(tS, x, 2); //atualiza na tabela o tempo de surto do processo para positivo
                    }
                    //
                    surtoTotal += tS; //soma todos os surtos (para a gerar o grafico)
                    tabela.updateUI(); //atualiza a tabela
                    //
                    todosProcessos[x] = new Processo(nome, tS, tCheg, ioStatus, tiIO, tdIO); //nome ,surto, chegada, status IO, tempo de inicio IO, duracao IO//armazena no vetor o nome o tempo de surto e chegada como um só
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(rootPane, "Alguns valores inseridos são inválidos!\n\n" + ex.getMessage() + "\n\nInsira corretamente os valores.", "Valor inválido encontrado!", JOptionPane.WARNING_MESSAGE);
                }
            }
            //
            if (exFIFO.isSelected()) {
                MostraGrafico.politica = "First In First Out";
                MostraGrafico.titulo = "FIFO";
                //
                String[] respostas = escalonar.fifo(todosProcessos, surtoTotal);
                mostrarResposta(respostas);
            } else if (exRR.isSelected()) {
                MostraGrafico.politica = "Round Robin";
                MostraGrafico.titulo = "RR";
                //
                String[] respostas = escalonar.roundRobin(quantum, todosProcessos, surtoTotal);
                mostrarResposta(respostas);
            } else if (exSJF.isSelected()) {
                MostraGrafico.politica = "Smalest Job First";
                MostraGrafico.titulo = "SJF";
                //
                String[] respostas = escalonar.smalestJobFirst(todosProcessos, surtoTotal);
                mostrarResposta(respostas);
            } else if (exSRTF.isSelected()) {
                MostraGrafico.politica = "Smalest Remaining Time First";
                MostraGrafico.titulo = "SRTF";

                String[] respostas = escalonar.smalestRemainingTimeFirst(todosProcessos, surtoTotal);
                mostrarResposta(respostas);
            }
        }
    }//GEN-LAST:event_executarMousePressed

    private void removerProcessoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removerProcessoMousePressed
        ((DefaultTableModel) tabela.getModel()).removeRow(tabela.getSelectedRow());
        String p; //string de nome de processo
        //
        for (int x = 0; x < tabela.getRowCount(); x++) {
            p = "P" + x; //gero o nome do processo
            ((DefaultTableModel) tabela.getModel()).setValueAt(p, x, 0); //redefine o nome de cada processo na tabela
        }
        //
        tabela.updateUI(); //atualiza a tabela
        tempoChegada.requestFocus(); //coloca o ponteiro de entrada do teclado no campo tempo de chegada, para adicionar processos
    }//GEN-LAST:event_removerProcessoMousePressed

    private void eraseTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eraseTableMousePressed
        ((DefaultTableModel) tabela.getModel()).setNumRows(0); //esvazia tabela
        tabela.updateUI();
        resultado.setText(""); //apaga o campo resultado
        temposProcessosT.setText(""); //apaga o campo tempos
    }//GEN-LAST:event_eraseTableMousePressed

    private void exFIFOMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exFIFOMousePressed
        quantumT.setEnabled(false);
    }//GEN-LAST:event_exFIFOMousePressed

    private void exRRMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exRRMousePressed
        quantumT.setEnabled(true);
    }//GEN-LAST:event_exRRMousePressed

    private void exSJFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exSJFMousePressed
        quantumT.setEnabled(false);
    }//GEN-LAST:event_exSJFMousePressed

    private void exSRTFMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exSRTFMousePressed
        quantumT.setEnabled(false);
    }//GEN-LAST:event_exSRTFMousePressed

    private void menuSobreMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuSobreMousePressed
        JOptionPane.showMessageDialog(rootPane, "\tDesenvolvedores:\n"
                + "-Leonardo Pereira Neves\n"
                + "facebook.com/leo.neves.98\n\n"
                + "-Matheus Coelho de Figueiredo\n"
                + "facebook.com/matheus.coelho.f\n\n"
                + "-Rômulo Pimentel de Lima\n"
                + "facebook.com/romulo.lima.5492\n\n"
                + "Para gerar os gráficos foi ultilizada a biblioteca JFreeChart\n"
                + "-jfree.org\n\n"
                + "\tProfessor Orientador:\n"
                + "-Luiz Guilherme Hilel Drumond Silveira\n\n"
                + "\tCentro Universtário UNA\n"
                + "Sistemas de Informação - 5° Período, 2015-1\n\n"
                + "", "Sobre", JOptionPane.PLAIN_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/chip-icon.png")));
    }//GEN-LAST:event_menuSobreMousePressed

    private void menuImportarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuImportarMousePressed
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Processos", "pmlr");
        chooser.addChoosableFileFilter(filter);
        chooser.showDialog(this, "Abrir");

        try {
            File arquivo = chooser.getSelectedFile();
            if (arquivo != null) {
                String processos = ler(arquivo);
                String hash = processos.substring(processos.indexOf("@*") + 2, processos.indexOf("@#") );
                processos = processos.replace("@*"+hash+"@#", "");
                
                System.out.println("hash "+hash);
                System.out.println("lista "+processos);
                
                System.out.println("hasha "+hash+" = hash "+processos.hashCode());
                
                if(Integer.parseInt(hash) == processos.hashCode() ){
                    int n = tabela.getRowCount();
                    String c = "", s = c, i = c, d = c, inout = c;

                    boolean io;

                    while (!processos.equals("")) {
                        c = processos.substring(processos.indexOf("C") + 1, processos.indexOf("S"));

                        s = processos.substring(processos.indexOf("S") + 1, processos.indexOf("B"));

                        inout = processos.substring(processos.indexOf("B&") + 2, processos.indexOf("e&") + 1);

                        if (!inout.equals("false")) {
                            i = processos.substring(processos.indexOf("I") + 1, processos.indexOf("D"));

                            d = processos.substring(processos.indexOf("D") + 1, processos.indexOf("$"));
                        }
                        processos = processos.replace(processos.substring(processos.indexOf("C"), processos.indexOf("$") + 1), "");

                        DefaultTableModel val = (DefaultTableModel) tabela.getModel();
                        String p = "P" + n;
                        if (inout.equals("false")) {
                            io = false;
                            val.addRow(new Object[]{p, c + "", s + "", io, " - ", " - "});
                        } else {
                            io = true;
                            val.addRow(new Object[]{p, c + "", s + "", io, i + "", d + ""});
                        }
                        n++;
                    }
                }else{
                    JOptionPane.showMessageDialog(rootPane, "Erro ao ler arquivo.\nVerifique a integridade do arquivo.\nO arquivo pode ter sido alterado ou corrompido.\n\n#"+hash+"\n#"+processos.hashCode()+"\n", "Erro de integridade", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Erro ao ler arquivo.\nVerifique a integridade do arquivo.\n\n" + e.getMessage(), "Erro de leitura", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_menuImportarMousePressed

    private void menuExportarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuExportarMousePressed
        int tamanhoTabela = tabela.getRowCount();
        if (tamanhoTabela > 0) {
            String texto = "";
            for (int a = 0; a < tamanhoTabela; a++) {
                if (tabela.getValueAt(a, 3).toString().equals("true")) {
                    texto += "C" + tabela.getValueAt(a, 1).toString(); //t.chegada
                    texto += "S" + tabela.getValueAt(a, 2).toString(); //surto
                    texto += "B" + "&" + tabela.getValueAt(a, 3).toString() + "&"; //io ou nao
                    texto += "I" + tabela.getValueAt(a, 4).toString(); //inicio io
                    texto += "D" + tabela.getValueAt(a, 5).toString(); //duracao io
                    texto += "$";
                } else {
                    texto += "C" + tabela.getValueAt(a, 1).toString(); //t.chegada
                    texto += "S" + tabela.getValueAt(a, 2).toString(); //surto
                    texto += "B" + "&" + tabela.getValueAt(a, 3).toString() + "&"; //io ou nao
                    texto += "$";
                }
            }
            gravar(texto);
        } else {
            JOptionPane.showMessageDialog(rootPane, "Arquivo não gravado, a lista está vazia!", "Arquivo não gravado!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_menuExportarMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePrincipal().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionar;
    private javax.swing.JTextField dIO;
    private javax.swing.JButton eraseTable;
    private javax.swing.JRadioButton exFIFO;
    private javax.swing.JRadioButton exRR;
    private javax.swing.JRadioButton exSJF;
    private javax.swing.JRadioButton exSRTF;
    private javax.swing.JButton executar;
    private javax.swing.ButtonGroup groupPoliticas;
    private javax.swing.JTextField iIO;
    private javax.swing.JCheckBox ioCheckBox;
    private javax.swing.JLabel labelDetalhesProcessoIO;
    private javax.swing.JLabel labelDuracaoIO;
    private javax.swing.JLabel labelNomesPoliticas;
    private javax.swing.JLabel labelQuantum;
    private javax.swing.JLabel labelTempoChegada;
    private javax.swing.JLabel labelTempoInicioIO;
    private javax.swing.JLabel labelTempoSurto;
    private javax.swing.JMenu menuArquivo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuExportar;
    private javax.swing.JMenuItem menuImportar;
    private javax.swing.JMenu menuSobre;
    private javax.swing.JPanel panelBotoesRemocao;
    private javax.swing.JPanel panelDetalhesIO;
    private javax.swing.JPanel panelProcesso;
    private javax.swing.JButton processosRandomicos;
    private javax.swing.JTextField quantumT;
    private javax.swing.JButton removerProcesso;
    private javax.swing.JTextPane resultado;
    private javax.swing.JScrollPane scrollPaneLista;
    private javax.swing.JScrollPane scrollPaneResultado;
    private javax.swing.JScrollPane scrollPaneTempos;
    private javax.swing.JTabbedPane tabbedPaneResultados;
    private javax.swing.JTable tabela;
    private javax.swing.JTextField tempoChegada;
    private javax.swing.JTextField tempoExec;
    private javax.swing.JTextPane temposProcessosT;
    // End of variables declaration//GEN-END:variables
    //
    private void mostrarResposta(String[] respostas) {
        resultado.setText(resultado.getText() + respostas[0]);
        temposProcessosT.setText(temposProcessosT.getText() + respostas[1]
                + "\n\n"
                + "\t+-----------------------------------------+\n"
                + "\t| Legenda unidade de tempo:   |\n"
                + "\t|  I/O: *tempo*                                |\n"
                + "\t|  Surto: tempo                               |\n"
                + "\t+-----------------------------------------+"
                + "");
    }
    //
    private void setIcon() { //define uma imagem como icone da janela
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/pkgIcone/chip-icon.png")));
    }
    //
    private String ler(File arquivo) {//le um arquivo especificado
        String resp = "";
        try {
            FileReader fileReader = new FileReader(arquivo);
            BufferedReader reader = new BufferedReader(fileReader);
            String data = null;
            while ((data = reader.readLine()) != null) {
                resp += data;
            }
            fileReader.close();
            reader.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Erro:\n" + e.getMessage() + "\nOcorreu um erro ao ler o arquivo!", "Erro", JOptionPane.WARNING_MESSAGE);
        }
        return resp;
    }
    //
    private void gravar(String texto) {
        JFileChooser chooser = new JFileChooser();
        chooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Processos", "pmlr");
        chooser.addChoosableFileFilter(filter);
        chooser.setDialogType(JFileChooser.DIRECTORIES_ONLY);
        //
        File diretorio;
        try {
            //
            int res = chooser.showSaveDialog(rootPane);
            if (res == JFileChooser.APPROVE_OPTION) {
                diretorio = chooser.getSelectedFile();
                if (diretorio.toString().contains(".pmlr") == true) {
                    int r = JOptionPane.showConfirmDialog(rootPane, "Arquivo já existente!\nDeseja sobrescrever o arquivo atual?", "Sobrescrever arquivo", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/export16x16.png")));
                    if (r == 0) {
                        new File(diretorio.toString()).mkdirs();
                        String path = diretorio.toString();
                        gravacao(path, texto);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Arquivo não foi gravado!", "Aviso", JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/export16x16.png")));
                    }
                } else {
                    new File(diretorio.toString().substring(0, diretorio.toString().lastIndexOf("\\"))).mkdirs();
                    String path = diretorio.toString() + ".pmlr";
                    gravacao(path, texto);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Arquivo não foi gravado\nDiretório não selecionado!", "Aviso", JOptionPane.WARNING_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/export16x16.png")));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Erro:\n" + e.getMessage() + "\nOcorreu um erro ao criar diretório!", "Erro", JOptionPane.WARNING_MESSAGE);
        }
    }

    private void gravacao(String path, String texto) {
        File file = new File(path);
        try {
            long begin = System.currentTimeMillis();
            BufferedWriter writer = new BufferedWriter(new FileWriter(file));
            long end = System.currentTimeMillis();

            writer.write(texto + "@*"+texto.hashCode()+"@#");

            writer.flush(); //grava

            writer.close(); //Fechando conexão e escrita do arquivo.

            JOptionPane.showMessageDialog(rootPane, "Arquivo gravado com sucesso!" + "\n\n"
                    + "Arquivo gravado em : " + new SimpleDateFormat("dd/MM/yyyy hh:mm:ss").format(new Date()) + "\n\n"
                    + "Caminho da gravação: " + path + "\n\n"
                    + "Tempo de gravação: " + (end - begin) + "ms.", "Arquivo Gravado", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/import16x16.png")));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Erro:\n" + e.getMessage() + "\nOcorreu um erro ao gravar o arquivo!", "Erro", JOptionPane.WARNING_MESSAGE);
        }
    }
}

/*
icone import
new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/import16x16.png"))

icone export
new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/export16x16.png"))

icone chip
new javax.swing.ImageIcon(getClass().getResource("/pkgIcone/chip-icon.png"))
*/
